/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
enum{BUF_SIZE = 256}; //???
extern YYSTYPE yylval; //YYSTYPE
extern void test();
extern void semantic(char msg[]);
extern char semantic_msg[256];
char buf[BUF_SIZE];
int F = 0;
int ERROR = 0;
int semantic_error = 0;

/* This macro is used to record code line */
#define CONCAT { strncat(buf, strdup(yytext), BUF_SIZE - strlen(buf) - 1);}
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*
NEWLINE 	[\n]

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return '+'; }
"-" 	{ CONCAT; return '-'; }
"*" 	{ CONCAT; return '*'; }
"/" 	{ CONCAT; return '/'; }
"%"     { CONCAT; return '%'; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return '>'; }
"<"		{ CONCAT; return '<'; }
">="	{ CONCAT; return GE_OP; }
"<="	{ CONCAT; return LE_OP; }
"=="	{ CONCAT; return EQ_OP; }
"!="	{ CONCAT; return NE_OP; }

 /* Assignment */
"="		{ CONCAT; return '='; }
"+="	{ CONCAT; return ADD_ASSIGN; }
"-="	{ CONCAT; return SUB_ASSIGN; }
"*="	{ CONCAT; return MUL_ASSIGN; }
"/="	{ CONCAT; return DIV_ASSIGN; }
"%="	{ CONCAT; return MOD_ASSIGN; }

 /* Logical */
"&&"	{ CONCAT; return AND_OP; }
"||"	{ CONCAT; return OR_OP; }
"!"		{ CONCAT; return '!'; }

 /* Delimiters */
"("		{ CONCAT; return '('; }
")"		{ CONCAT; return ')'; }
"{"		{ CONCAT; return '{'; }
"}"		{ CONCAT; return '}'; }
"["		{ return '['; }
"]"		{ return ']'; }
","		{ CONCAT; return ','; }
";"		{ CONCAT; return ';'; }
" "		{ CONCAT; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return(IF); }
"else"		{ CONCAT; return(ELSE); }
"for"		{ CONCAT; return(FOR); }
"while"		{ CONCAT; return(WHILE); }

 /* Declaration Keywords */
"void"		{ CONCAT; return VOID; }
"int"		{ CONCAT; return INT; }
"float"  	{ CONCAT; return FLOAT; }
"string"  	{ CONCAT; return STRING; }
"bool"  	{ CONCAT; return BOOL;}

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RETURN; }

 /* String Constant */
\"				        { CONCAT; BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT; yylval.string = strdup(yytext); return STRING_CONST;  }

 /* Number Constant */
{integer}	{ CONCAT; yylval.i_val = atoi(yytext); return I_CONST; }
{float}	    { CONCAT; yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ 
					 // memset(buf, 0, sizeof(buf));
					  CONCAT; 
					  //printf("%d: /*", yylineno);
					  //printf("%d: %s", yylineno, buf);
					  //printf("%s", buf);
					  //memset(buf, 0, sizeof(buf));
					  BEGIN COMMENT; }
<COMMENT>[^*\n] { 
						CONCAT;
						//if(!strcmp(buf," ") && F == 0){
					  	//	printf("%d: ", yylineno);
						//}
						//else{
					    //	printf("%s", buf);
					  	//	printf("---------------------");
						//	memset(buf, 0, sizeof(buf));
						//}
					}
<COMMENT>\n			{ 
						printf("%d: %s\n", yylineno, buf); 
						memset(buf, 0, sizeof(buf));
						F = 0;
						ERROR = 1;
						return NEWLINE;
					}
					 
<COMMENT>"*"		{ 
					  //printf("=======================");
					  CONCAT;
					  F = 1;
					  //memset(buf, 0, sizeof(buf));
					  //printf("*");
					}
<COMMENT>"*/"		{ //printf("*/");
					  CONCAT;
					  BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT; //printf("%s", buf);
		  //memset(buf, 0, sizeof(buf));
}

 /* Variable ID */
 {id}       { yylval.string = strdup(yytext); CONCAT; return ID; }

 /* others */

[;]         {  }
[\n]        { 	
					if(ERROR){
						printf("%d: %s\n", yylineno, buf);
						if(semantic_error){
							semantic(semantic_msg);
						}
						test();
						return 0;
					}
					else if(semantic_error){
						printf("%d: %s\n", yylineno, buf);
						//memset(buf, 0, sizeof(buf));
						return NEWLINE;
					}
					if(!strcmp(buf, "")){
						printf("%d:\n", yylineno);
					}
					else{
						printf("%d: %s\n", yylineno, buf);
					}
					memset(buf, 0, sizeof(buf));
				//	test();
				/*printf("\n");*/ 
				return NEWLINE; }
[ \t]		{ } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { return 0; }

%%

int yywrap()
{
    return 1;
}
