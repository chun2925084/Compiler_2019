/* Definition section */
%{
#include "common.h" 
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
enum{BUF_SIZE = 256}; 
char buf[BUF_SIZE];

extern void semantic(char msg[]);
extern char semantic_msg[256];
int ERROR = 0;
int semantic_error = 0;
extern void test();

/* This macro is used to record code line */
#define CONCAT { strncat(buf, strdup(yytext), BUF_SIZE - strlen(buf) - 1);}

%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return '+'; }
"-" 	{ CONCAT; return '-'; }
"*" 	{ CONCAT; return '*'; }
"/" 	{ CONCAT; return '/'; }
"%"     { CONCAT; return '%'; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return '>'; }
"<"		{ CONCAT; return '<'; }
">="	{ CONCAT; return GE_OP; }
"<="	{ CONCAT; return LE_OP; }
"=="	{ CONCAT; return EQ_OP; }
"!="	{ CONCAT; return NE_OP; }

 /* Assignment */
"="		{ CONCAT; return '='; }
"+="	{ CONCAT; return ADD_ASSIGN; }
"-="	{ CONCAT; return SUB_ASSIGN; }
"*="	{ CONCAT; return MUL_ASSIGN; }
"/="	{ CONCAT; return DIV_ASSIGN; }
"%="	{ CONCAT; return MOD_ASSIGN; }

 /* Logical */
"&&"	{ return AND_OP; }
"||"	{ return OR_OP; }
"!"		{ return "!"; }
 /* Delimiters */
"("		{ CONCAT; return '('; }
")"		{ CONCAT; return ')'; }
"{"		{ CONCAT; return '{'; }
"}"		{ CONCAT; return '}'; }
"["		{ return '['; }
"]"		{ return ']'; }
","		{ CONCAT; return ','; }
" "		{ CONCAT; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; return VOID; }
"int"		{ CONCAT; return INT; }
"float"  	{ CONCAT; return FLOAT; }
"string"  	{ CONCAT; return STRING; }
"bool"  	{ CONCAT; return BOOL; }

 /* boolean Keywords */
"TRUE"      { CONCAT; return TRUE; }
"FALSE"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RETURN; }

 /* String Constant */
\"				        { CONCAT; BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT; 
						yylval.rule_type.type = STRING_t;
						yylval.rule_type.string = strdup(yytext); 
						return STRING_CONST;  }

 /* Number Constant */
{integer}	{ CONCAT; yylval.rule_type.i_val = atoi(yytext); return I_CONST; }
{double}	{ CONCAT; yylval.rule_type.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ }
<COMMENT>\n			{ }
<COMMENT>"*"		{ }
<COMMENT>"*/"		{ BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ ; }

 /* Variable ID */
{id}       { CONCAT; yylval.rule_type.id = strdup(yytext); return ID; }

 /* others */

[;]         { CONCAT; return ';'; }
[\n]        {
			if(ERROR){
				printf("%d: %s\n", yylineno, buf);
				if(semantic_error){
					semantic(semantic_msg);
				}
				test();
				return 0;
			}
			else if(semantic_error){
				printf("%d: %s\n", yylineno, buf);
				//memset(buf, 0, sizeof(buf));
				return NEWLINE;
			}
			if(!strcmp(buf, "")){
				printf("%d:\n", yylineno);
			}
			else{
				printf("%d: %s\n", yylineno, buf);
			}
			memset(buf, 0, sizeof(buf));
			return NEWLINE; }
[ \t]		{ } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { static int once = 0; return once++ ? 0 : SEMICOLON; }

%%

int yywrap()
{
    return 1;
}
